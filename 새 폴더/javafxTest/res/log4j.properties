# Root logger option

# 1. 로그 출력 Level은 INFO부터 할것임.
# 2. rootLogger 에 사용할 로깅 Appender로 stdout이라는것과 
#    logfile이라는 것 두가지를 사용하겠다
#log4j.rootLogger=debug, stdout, logfile
#log4j.rootLogger=info, stdout, logfile
#log4j.rootLogger=trace, stdout, logfile
log4j.rootLogger=debug, stdout
#출력의 범위를 설정 ,, 자신의 레벨보다 높은 것들을 출력시킨다. 
#info : fatal, error, warn, info의 네가지가 출력되고 trace를 기술하면 여섯가지가 전부 출력된다.

# Direct log messages to stdout
# ConversionPattern은 로그가 어떠한 형식으로 출력될것인지 
# 그 포맷을 정의하는 것.
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p (%C{2} - %M : %L) - %m%n

#L: 줄번호, %m : 메시지
# Direct log message to log file
# logfile이라는 appender는 로그를 파일로 출력해주는 놈인데, 
# 파일path를 정의 할 수 있다.(파일을 생성하지 않고 콘솔창에서만 보여줄때는 logfile을 주석처리하고 지워준다. )

#log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
#log4j.appender.logfile.File=D:/d_other/application.log
#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
#log4j.appender.logfile.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p (%C{2} - %M:%L) - %m%n
#log4j.appender.logfile.Append=true

# Sql log
# 이곳이 java.sql.* 을 사용하는 쿼리를 보여주는 설정.(실행되는 쿼리문을 보여준다.)
#log4j.logger.java.sql.Connection=DEBUG, logfile
#log4j.logger.java.sql.Statement=DEBUG, logfile
#log4j.logger.java.sql.PreparedStatement=DEBUG, logfile
#log4j.logger.java.sql.ResultSet=DEBUG, logfile

#logfile를 지웠을 때 sql문 출력  형식 
#log4j.logger.java.sql.Connection=DEBUG
#log4j.logger.java.sql.Statement=DEBUG
#log4j.logger.java.sql.PreparedStatement=DEBUG
#log4j.logger.java.sql.ResultSet=DEBUG




